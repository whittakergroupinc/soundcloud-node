// Generated by CoffeeScript 1.6.3
var SoundCloud, access_token, client_id, client_secret, host_api, host_connect, https, qs, redirect_uri, user_id, variables, _applyVariables, _getConfig, _request, _setupRequest, _user_id;

https = require("https");

qs = require("querystring");

host_api = 'api.soundcloud.com';

host_connect = 'https://soundcloud.com/connect';

client_id = null;

client_secret = null;

redirect_uri = null;

access_token = null;

user_id = null;

/**
 * Returns the config data needed to build a connect url
 *
 * @private
 * @return {Object}  The required data
*/


_getConfig = function() {
  return {
    client_id: client_id,
    client_secret: client_secret,
    redirect_uri: redirect_uri,
    response_type: 'code',
    scope: 'non-expiring'
  };
};

/**
 * Return the current user_id value
 * @return {Number}
*/


_user_id = function() {
  return user_id;
};

/**
 * Mixin variables with their respective
 * @type {[type]}
*/


variables = {
  '{id}': _user_id
};

_applyVariables = function(path) {
  var pattern, value;
  for (pattern in variables) {
    value = variables[pattern];
    path = path.replace(pattern, value());
  }
  return path;
};

/**
 * Builds the query to be ready for the request
 *
 * @private
 * @param  {String}   method       GET, POST, PUT or DELETE
 * @param  {String}   path         The query path
 * @param  {Object}   params
 * @param  {Function} callback
*/


_setupRequest = function(method, path, params, callback) {
  var requestData;
  if (callback == null) {
    callback = function() {};
  }
  if (access_token == null) {
    return callback({
      message: 'access_token is required.'
    }, null);
  }
  requestData = {
    method: method.toUpperCase(),
    uri: host_api
  };
  if (path[0] !== '/') {
    path = '/' + path;
  }
  requestData.path = _applyVariables(path);
  if (typeof params === "function") {
    callback = params;
    params = null;
  }
  params = params || {
    format: 'json'
  };
  params.oauth_token = access_token;
  requestData.params = params;
  return _request.apply(this, [requestData, callback]);
};

/**
 * The function that does the actual query to SoundCloud
 *
 * @private
 * @param  {Object}   data     The request data
 * @param  {Function} callback
*/


_request = function(data, callback) {
  var options, params, req;
  params = qs.stringify(data.params);
  options = {
    hostname: data.uri,
    path: "" + data.path + "?" + params,
    method: data.method
  };
  if (data.method === "POST") {
    options.path = data.path;
    options.headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      "Content-Length": params.length,
      "Authorization": `OAuth ${options.oauth_token}`
    };
  }
  req = https.request(options, function(response) {
    var body;
    body = "";
    response.on("data", function(chunk) {
      return body += chunk;
    });
    return response.on("end", function() {
      var err;
      try {
        data = JSON.parse(body || '{}');
        if (response.statusCode !== 200) {
          return callback(data.errors, data);
        } else {
          return callback(null, data);
        }
      } catch (_error) {
        err = _error;
        return callback(err);
      }
    });
  });
  req.on("error", function(err) {
    return callback(err);
  });
  if (data.method === "POST") {
    req.write(params);
  }
  return req.end();
};

/**
 * @class
 * @namespace SoundCloud
*/


module.exports = SoundCloud = (function() {
  /*
   * Initialize with client id, client secret and redirect url.
   *
   * @constructor
   * @param {String}  client_id
   * @param {String}  client_secret
   * @param {String}  redirect_uri
   * @param {Object=} credentials  Optional object with access_token and/or user_id
  */

  function SoundCloud(id, secret, uri, credentials) {
    var required;
    if (!(this instanceof SoundCloud)) {
      return new SoundCloud(id, secret, uri, credentials);
    }
    required = [];
    [].slice.call(arguments, 0, -1).forEach(function(arg) {
      if (arg == null) {
        return required.push(arg);
      }
    });
    if (required.length) {
      console.log('The following arguments are required: ', required);
      return false;
    }
    client_id = id;
    client_secret = secret;
    redirect_uri = uri;
    if (credentials) {
      if (credentials.access_token) {
        this.setToken(credentials.access_token);
      }
      if (credentials.user_id) {
        this.setUser(credentials.user_id);
      }
    }
  }

  /*
   * Get the url to SoundCloud's authorization/connection page.
   *
   * @param {Object} options
   * @return {String}
  */


  SoundCloud.prototype.getConnectUrl = function(options) {
    if (!options) {
      options = _getConfig.call(this);
    }
    return host_connect + "?" + (options ? qs.stringify(options) : "");
  };

  SoundCloud.prototype.setToken = function(token) {
    return access_token = token;
  };

  SoundCloud.prototype.setUser = function(id) {
    return user_id = id;
  };

  /*
   * Using the provided code from the successful SoundCloud connect page, we send that
   * back to soundcloud to get the access_token, and we save it if it returns successful
   *
   * @param {String} code        code returned by SoundCloud
   * @param {Function} callback  provides (error, response)
  */


  SoundCloud.prototype.getToken = function(code, callback) {
    var options,
      _this = this;
    options = {
      uri: host_api,
      path: "/oauth2/token",
      method: "POST",
      params: {
        client_id: client_id,
        client_secret: client_secret,
        grant_type: "authorization_code",
        redirect_uri: redirect_uri,
        code: code
      }
    };
    return _request.apply(this, [
      options, function(err, resp) {
        if (resp.access_token) {
          _this.setToken(resp.access_token);
        }
        return callback.apply(_this, arguments);
      }
    ]);
  };

  SoundCloud.prototype.getMe = function(callback) {
    return this.get('me.json', callback);
  };

  /*
   * Make an API call
   *
   * @param {String} path
   * @param {Object} params
   * @param {Function} callback(error, data)
  */


  SoundCloud.prototype.get = function(path, params, callback) {
    return _setupRequest.apply(this, ["GET", path, params, callback]);
  };

  SoundCloud.prototype.post = function(path, params, callback) {
    return _setupRequest.apply(this, ["POST", path, params, callback]);
  };

  SoundCloud.prototype.put = function(path, params, callback) {
    return _setupRequest.apply(this, ["PUT", path, params, callback]);
  };

  SoundCloud.prototype["delete"] = function(path, params, callback) {
    return _setupRequest.apply(this, ["DELETE", path, params, callback]);
  };

  return SoundCloud;

})();
